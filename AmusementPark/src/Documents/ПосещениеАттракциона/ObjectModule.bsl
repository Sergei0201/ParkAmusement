// @strict-types


#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработка проведения.
// 
// Параметры:
//  Отказ  - Булево - Отказ
//  Режим - РежимПроведенияДокумента - Режим
Процедура ОбработкаПроведения(Отказ,Режим)
	Движения.АктивныеПосещения.Записывать = Истина;
	Движения.Записать();
	
	Выборка = АктивныеПосещения();
	
	ОсталосьПосещений = 0;
	ВидАттракционаАбонемента = Неопределено;
	Если Выборка.Следующий() Тогда
		ОсталосьПосещений = Выборка.КоличествоПосещенийОстаток; // см. Число
		ВидАттракционаАбонемента = Выборка.ВидАттракциона; //СправочникСсылка.ВидыАттракционов
	КонецЕсли;
	
	Если ОсталосьПосещений < 1 Тогда
		Отказ = Истина;
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "В билете не осталось посещений";
		Сообщение.УстановитьДанные(ЭтотОбъект);
		Сообщение.Поле = "Основание";
		Сообщение.Сообщить();	
	КонецЕсли;
	
	ВидАттракционаДокумента = ВидАттракциона(Аттракцион);
	Если ЗначениеЗаполнено(ВидАттракционаАбонемента) И ВидАттракционаАбонемента <> ВидАттракционаДокумента Тогда
		Отказ = Истина;
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "Билет не подходит для посещения этого Аттракциона";
		Сообщение.УстановитьДанные(ЭтотОбъект);
		Сообщение.Поле = "Основание";
		Сообщение.Сообщить();	
	КонецЕсли;

	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	// регистр АктивныеПосещения
	Движения.АктивныеПосещения.Записывать = Истина;
	Движение = Движения.АктивныеПосещения.Добавить();
	Движение.Период = Дата;
	Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
	Движение.Основание = Основание;
	Движение.ВидАттракциона = ВидАттракционаАбонемента;
	Движение.КоличествоПосещений = 1;
	
	// регистр ПосещенияАттракционов
	Движения.ПосещениеАттракционов.Записывать = Истина;
	ДвижениеПосещение = Движения.ПосещениеАттракционов.Добавить();
	ДвижениеПосещение.Период = Дата;
	ДвижениеПосещение.Аттракцион = Аттракцион;
	ДвижениеПосещение.Клиент = КлиентПоОснованию();
	Движение.КоличествоПосещений = 1;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Клиент по основанию.
// 
// Возвращаемое значение:
// СправочникСсылка.Клиенты.
Функция КлиентПоОснованию()
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |    ПродажаБилета.Клиент
        |ИЗ
        |    Документ.ПродажаБилета КАК ПродажаБилета
        |ГДЕ
        |    ПродажаБилета.Ссылка = &Основание";
   Запрос.УстановитьПараметр("Основание", Основание); 
   Выборка = Запрос.Выполнить().Выбрать();
   
   Выборка.Следующий();
   
   Возврат Выборка.Клиент;  // СправочникСсылка.Клиенты 
КонецФункции

// Активные посещения.
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса - Активные посещения
Функция АктивныеПосещения()

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	АктивныеПосещенияОстатки.КоличествоПосещенийОстаток,
	|	АктивныеПосещенияОстатки.ВидАттракциона
	|ИЗ
	|	РегистрНакопления.АктивныеПосещения.Остатки(, Основание = &Основание) КАК АктивныеПосещенияОстатки";
	Запрос.УстановитьПараметр("Основание", Основание);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат Выборка
КонецФункции

// Вид аттракциона.
// 
// Параметры:
//  Аттракцион - СправочникСсылка.Аттракционы - Аттракцион
// 
// Возвращаемое значение: 
// 	ВыборкаИзРезультатаЗапроса - ВидАттракциона.
//  
Функция ВидАттракциона(Аттракцион)

		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Аттракционы.ВидАттракциона
			|ИЗ
			|	Справочник.Аттракционы КАК Аттракционы
			|ГДЕ
			|	Аттракционы.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", Аттракцион);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		ВыборкаДетальныеЗаписи.Следующий();
	
		Возврат ВыборкаДетальныеЗаписи.ВидАттракциона; // СправочникСсылка из РезультатЗапроса.
		
КонецФункции

#КонецОбласти

#КонецЕсли
